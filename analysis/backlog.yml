epics:
  - id: EPIC-1
    name: Foundational Backend & Security
    description: Establish a secure backend, proxy AI calls, and set up the database foundation.
  - id: EPIC-2
    name: Core Feature Implementation
    description: Build out essential user-facing features like client management and session persistence.
  - id: EPIC-3
    name: Quality & Production Readiness
    description: Improve testing, CI/CD, and developer experience to prepare for a production launch.

stories:
  # Milestone 1: Backend API & AI Service Abstraction
  - id: TASK-1
    name: Setup Node.js/Express Backend Server
    epic_id: EPIC-1
    estimate: 3
    prerequisites: []
    description: "Initialize a new Node.js project in a `backend/` directory with Express and TypeScript."
  - id: TASK-2
    name: Create AI Proxy Endpoints
    epic_id: EPIC-1
    estimate: 5
    prerequisites: [TASK-1]
    description: "Create routes in the Express server to handle requests for all Google AI services (analyze, plan, generate, edit, search)."
  - id: TASK-3
    name: Secure API Key on Backend
    epic_id: EPIC-1
    estimate: 2
    prerequisites: [TASK-2]
    description: "Move the GEMINI_API_KEY from the frontend (vite.config.ts) to the backend's .env file."
  - id: TASK-4
    name: Refactor Frontend Services to Use Backend
    epic_id: EPIC-1
    estimate: 8
    prerequisites: [TASK-2]
    description: "Update `geminiService.ts` to call the new backend API endpoints instead of the Google AI SDK directly. Configure Vite proxy."
  - id: TASK-5
    name: Implement Backend Authentication Middleware
    epic_id: EPIC-1
    estimate: 5
    prerequisites: [TASK-1]
    description: "Add middleware to the Express server to verify Firebase JWTs sent from the client, securing the new endpoints."

  # Milestone 2: Database Integration
  - id: TASK-6
    name: Setup Dockerized Postgres Database
    epic_id: EPIC-1
    estimate: 3
    prerequisites: []
    description: "Create a docker-compose.yml file to manage a Postgres instance for local development."
  - id: TASK-7
    name: Initialize Prisma and Define Schema
    epic_id: EPIC-1
    estimate: 8
    prerequisites: [TASK-6]
    description: "Add Prisma to the backend and define the schema for User, Salon, Client, and FormulaSession with RLS design notes."
  - id: TASK-8
    name: Create Initial Database Migrations
    epic_id: EPIC-1
    estimate: 3
    prerequisites: [TASK-7]
    description: "Generate and apply the first Prisma migration to set up the database tables."
  - id: TASK-9
    name: Create CRUD APIs for Clients & Sessions
    epic_id: EPIC-1
    estimate: 8
    prerequisites: [TASK-7]
    description: "Build the backend routes and controllers for creating, reading, updating, and deleting clients and formula sessions."

  # Milestone 3: Client Management
  - id: TASK-10
    name: Implement Client Management UI
    epic_id: EPIC-2
    estimate: 13
    prerequisites: [TASK-9]
    description: "Build the UI components for a new 'Clients' tab to list, view, and create clients."
  - id: TASK-11
    name: Connect Intake/Formula Flow to Persistence
    epic_id: EPIC-2
    estimate: 8
    prerequisites: [TASK-10]
    description: "Wire up the Intake and Formula Builder tabs to use the new client management state and save sessions to the database via the API."
  - id: TASK-12
    name: Add Export to PDF/PNG Feature
    epic_id: EPIC-2
    estimate: 5
    prerequisites: [TASK-11]
    description: "Implement a client-side feature to export the final color plan view as a PDF or PNG file."

  # Milestone 4: Simulation Studio Enhancements
  - id: TASK-13
    name: Decouple Simulation Studio
    epic_id: EPIC-2
    estimate: 5
    prerequisites: []
    description: "Refactor the Simulation Studio so it can be used independently without requiring a photo from the Intake tab."
  - id: TASK-14
    name: Implement Side-by-Side Comparison
    epic_id: EPIC-2
    estimate: 8
    prerequisites: [TASK-13]
    description: "Add a UI component (slider or dual-pane view) to compare the original and edited images in the Simulation Studio."
  - id: TASK-15
    name: Implement Snapshot Stack
    epic_id: EPIC-2
    estimate: 8
    prerequisites: [TASK-13]
    description: "Add state management and UI to allow users to save and switch between multiple image edits or generations."

  # Milestone 5: Testing, CI, and DX
  - id: TASK-16
    name: Add Unit and Integration Tests
    epic_id: EPIC-3
    estimate: 13
    prerequisites: [TASK-4]
    description: "Write Jest/RTL tests for critical components (Login, IntakeTab) and backend API routes."
  - id: TASK-17
    name: Add E2E Tests with Cypress
    epic_id: EPIC-3
    estimate: 8
    prerequisites: [TASK-11]
    description: "Create Cypress tests for the main user flows: registration and creating a full client session."
  - id: TASK-18
    name: Create CI Workflow with GitHub Actions
    epic_id: EPIC-3
    estimate: 5
    prerequisites: [TASK-16, TASK-17]
    description: "Set up a CI pipeline to run linting, tests, and builds on every push to the main branch."
  - id: TASK-19
    name: Create .env.example Files
    epic_id: EPIC-3
    estimate: 1
    prerequisites: [TASK-1, TASK-6]
    description: "Add .env.example files to both the frontend and backend to document required environment variables."
  - id: TASK-20
    name: Add Security Headers to Backend
    epic_id: EPIC-3
    estimate: 2
    prerequisites: [TASK-1]
    description: "Add the 'helmet' middleware to the Express server to protect against common web vulnerabilities."
